"use client";lace function fetch_initial_data()
returns json language plpgsql as $$
import React, { useEffect, useState } from "react";
import { Sheet, SheetContent, SheetHeader, SheetTitle, SheetDescription } from "@/components/ui/sheet";
import { createClient } from "@/utils/supabase/client";
import CreateOrderForm from "./form"; // This is the correct import
    'clients', (select array_to_json(array_agg(row_to_json(c))) from (select id, nome, telefono, email, customer_uuid from customers limit 100) c)
const supabase = createClient();

export function CreateOrder({
  isDialogOpen,
  setIsDialogOpen,
  initialFormData}: {  isDialogOpen: boolean;  setIsDialogOpen: (open: boolean) => void;  initialFormData?: {    data: string;    orarioInizio: string;    orarioFine: string;  } | null;}) {  const [statuses, setStatuses] = useState<string[]>([]);  const [teamMembers, setTeamMembers] = useState<{ id: string; name: string }[]>([]);  const [appointments, setAppointments] = useState<any[]>([]);  const [services, setServices] = useState<any[]>([]); // Add services state  const [loading, setLoading] = useState(true);  const [clients, setClients] = useState<{ id: number; nome: string; customer_uuid: string }[]>([]);  const [errorMessage, setErrorMessage] = useState<string | null>(null);  useEffect(() => {    const fetchData = async () => {      console.log("[DEBUG] Inizio fetchData");      console.time("fetchData");      try {        const user = await supabase.auth.getUser();        if (!user.data?.user) {          console.error("[DEBUG] Utente non autenticato.");          return;        }        console.log("[DEBUG] Utente autenticato:", user.data.user);        // Controlla se i dati sono già stati caricati in cache e se sono validi        const cachedData = localStorage.getItem('cachedData');        const cacheTimestamp = localStorage.getItem('cacheTimestamp');        const cacheValid = cacheTimestamp && (Date.now() - parseInt(cacheTimestamp, 10)) < 3600000; // 1 ora        if (cachedData && cacheValid) {          console.log("[DEBUG] Dati trovati in cache valida.");          const parsedData = JSON.parse(cachedData);          setStatuses(parsedData.statuses || []);          setTeamMembers(parsedData.teamMembers || []);          setAppointments(parsedData.appointments || []);          setServices(parsedData.services || []);          setClients(parsedData.clients || []);          return;        }        console.log("[DEBUG] Nessun dato in cache valida, eseguo le chiamate API.");        const [statusesData, teamMembersData, appointmentsData, servicesData, clientsData] = await Promise.all([          supabase.from("user_filters").select("name").eq("user_id", user.data.user.id),          supabase.from("team").select("id, name").eq("user_id", user.data.user.id),          supabase.from("orders").select("*").eq("user_id", user.data.user.id),          supabase.from("services").select("*").eq("user_id", user.data.user.id),          supabase.from("customers").select("nome,customer_uuid").eq("user_id", user.data.user.id),        ]);        console.log("[DEBUG] Risultati delle chiamate API:", {          statusesData,          teamMembersData,          appointmentsData,          servicesData,          clientsData,        });        if ([statusesData, teamMembersData, appointmentsData, servicesData, clientsData].some(data => data.error)) {          throw new Error("Errore in una o più chiamate API.");        }        const transformedData = {          statuses: statusesData.data?.map((item) => item.name) || [],          teamMembers: teamMembersData.data || [],          appointments: appointmentsData.data || [],          services: servicesData.data || [],          clients: (clientsData.data || []).map((client, index) => ({            id: index,            nome: client.nome,            customer_uuid: client.customer_uuid,          })),        };        console.log("[DEBUG] Dati trasformati:", transformedData);        // Salva i dati in cache con timestamp        localStorage.setItem('cachedData', JSON.stringify(transformedData));        localStorage.setItem('cacheTimestamp', Date.now().toString());        setStatuses(transformedData.statuses);        setTeamMembers(transformedData.teamMembers);        setAppointments(transformedData.appointments);        setServices(transformedData.services);        setClients(transformedData.clients);      } catch (error) {        const errorMessage = error instanceof Error ? error.message : "Errore sconosciuto.";        console.error("[DEBUG] Errore:", errorMessage);        setErrorMessage(`Errore durante il recupero dei dati: ${errorMessage}`);      } finally {        console.timeEnd("fetchData");        console.log("[DEBUG] Fine fetchData");        setLoading(false);      }    };    fetchData();  }, []);  return (    <Sheet open={isDialogOpen} onOpenChange={setIsDialogOpen}>      <SheetContent className="w-full sm:max-w-[600px] overflow-y-auto bg-gray-50 p-2" side="right"> {/* Changed p-4 to p-2 */}        <SheetHeader className="mb-4">              </SheetHeader>        <div className="w-full space-y-4">          {loading ? (            <div>Loading...</div>          ) : errorMessage ? (            <div className="text-red-500">{errorMessage}</div>          ) : (            <CreateOrderForm              statuses={statuses}              teamMembers={teamMembers}              setIsDialogOpen={setIsDialogOpen}              initialFormData={initialFormData}              appointments={appointments}              services={services}            />          )}        </div>      </SheetContent>    </Sheet>  );
}
